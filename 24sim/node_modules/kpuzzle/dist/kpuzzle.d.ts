import { SiGNMove } from "alg";
import { MoveExpander } from "./moveexpander";
export declare class OrbitTransformation {
    permutation: number[];
    orientation: number[];
}
export declare class Transformation {
    [/* orbit name */ key: string]: OrbitTransformation;
}
export declare class OrbitDefinition {
    numPieces: number;
    orientations: number;
}
export declare class KPuzzleDefinition {
    name: string;
    orbits: {
        [/* orbit name */ key: string]: OrbitDefinition;
    };
    startPieces: Transformation;
    moves: {
        [/* move name */ key: string]: Transformation;
    };
    svg?: string;
    moveExpander?: MoveExpander;
}
export declare function Combine(def: KPuzzleDefinition, t1: Transformation, t2: Transformation): Transformation;
export declare function Multiply(def: KPuzzleDefinition, t: Transformation, amount: number): Transformation;
export declare function IdentityTransformation(definition: KPuzzleDefinition): Transformation;
export declare function Invert(def: KPuzzleDefinition, t: Transformation): Transformation;
export declare function EquivalentTransformations(def: KPuzzleDefinition, t1: Transformation, t2: Transformation): boolean;
export declare function EquivalentStates(def: KPuzzleDefinition, t1: Transformation, t2: Transformation): boolean;
export declare function stateForSiGNMove(def: KPuzzleDefinition, signMove: SiGNMove): Transformation;
export declare class KPuzzle {
    definition: KPuzzleDefinition;
    state: Transformation;
    constructor(definition: KPuzzleDefinition);
    serialize(): string;
    applySiGNMove(signMove: SiGNMove): void;
    applyMove(moveName: string): this;
    getMoveExpander(create: boolean): MoveExpander | undefined;
    setFaceNames(faceNames: Array<string>): void;
    addGrip(grip1: string, grip2: string, nslices: number): void;
    expandSlices(rep: string, signMove: SiGNMove): Transformation | undefined;
    expandSlicesByName(mv: string): Transformation | undefined;
}
