{"version":3,"sources":["webpack://twisty/webpack/universalModuleDefinition","webpack://twisty/webpack/bootstrap","webpack://twisty/external \"alg\"","webpack://twisty/external \"kpuzzle\"","webpack://twisty/./src/cursor.ts","webpack://twisty/./src/anim.ts","webpack://twisty/./src/puzzle.ts","webpack://twisty/./src/widget.ts","webpack://twisty/./src/twisty.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","countAnimatedMovesInstance","cursor_CountAnimatedMoves","external_alg_","[object Object]","sequence","total","part","nestedUnits","traverse","group","traverseSequence","nestedSequence","signMove","commutator","A","B","conjugate","pause","newLine","commentShort","commentLong","countAnimatedMoves","cursor_Cursor","alg","puzzle","setMoves","setPositionToStart","durationFn","AlgDuration","DefaultDurationForAmount","moves","length","moveIdx","moveStartTimestamp","algTimestamp","state","startState","forward","algDuration","pos","move","moveTS","push","direction","Direction","Forwards","fraction","duration","stopAtMoveBoundary","backward","stopAtEndOfMove","remainingOffset","numMoves","lengthOfMove","combine","stateFromMove","stopAtStartOfMove","prevMove","invert","Cursor","BreakpointType","amount","Math","abs","ConstantDurationForAmount","durationForAmount","super","Dispatcher","cursorObservers","Set","directionObservers","jumpObservers","observer","has","add","cursor","animCursorChanged","animDirectionChanged","animCursorJumped","anim_AnimModel","lastCursorTime","Paused","breakpointType","EntireMoveSequence","tempo","dispatcher","scheduler","FrameScheduler","frame","startOfAlg","endOfAlg","timestamp","elapsed","delta","timeScaling","Move","setDirection","stop","updateCursor","performance","now","start","singleFrame","setBreakpointType","animateDirection","Backwards","skipAndPauseTo","currentTimestamp","isPaused","playForward","callback","animating","requestAnimationFrame","animFrame","Puzzle","multiply","newState","puzzle_KSolvePuzzle","definition","id","external_kpuzzle_","startPieces","s1","s2","FullscreenAPI","element","document","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","request","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullscreen","exit","exitFullscreen","mozCancelFullScreen","msExitFullscreen","webkitExitFullscreen","widget_Button","title","initialClass","createElement","classList","addEventListener","onpress","Button","Fullscreen","SkipToStart","anim","skipToStart","SkipToEnd","skipToEnd","PlayPause","registerDirectionObserver","isAtEnd","togglePausePlayForward","newClass","remove","StepForward","stepForward","StepBackward","stepBackward","ControlBar","twistyElement","appendChild","Scrubber","type","oninput","bounds","getBounds","min","String","max","registerCursorObserver","parseInt","v","style","background","updateBackground","widget_CursorTextMoveView","k","floor","slice","currentPosition","formatFraction","textContent","widget_KSolveView","registerJumpObserver","svg","def","partialMove","outerLayer","innerLayer","family","draw","console","log","setTimeout","Player","TwistyParams","twisty_Twisty","config","Niklas","puzzleDef","autoInitialize","elem","ini","getAttribute","params","algo","paramsFromTwistyElem","window","elems","querySelectorAll"],"mappings":"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","file":"twisty.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"alg\"), require(\"kpuzzle\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"alg\", \"kpuzzle\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"twisty\"] = factory(require(\"alg\"), require(\"kpuzzle\"));\n\telse\n\t\troot[\"twisty\"] = factory(root[\"alg\"], root[\"kpuzzle\"]);\n})(typeof self !== \"undefined\" ? self : this, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__1__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","import {\n  AlgPart,\n  SiGNMove,\n  CommentLong,\n  CommentShort,\n  Commutator,\n  Conjugate,\n  Example,\n  Group,\n  NewLine,\n  Pause,\n  Sequence,\n  expand\n} from \"alg\"\nimport {TraversalUp} from \"alg\"\nimport {Puzzle, State} from \"./puzzle\"\n\n\"use strict\";\n\n// TODO: Include Pause.\nclass CountAnimatedMoves extends TraversalUp<number> {\n  public traverseSequence(sequence: Sequence): number {\n    var total = 0;\n    for (var part of sequence.nestedUnits) {\n      total += this.traverse(part);\n    }\n    return total;\n  }\n  public traverseGroup(group: Group): number {\n    return this.traverseSequence(group.nestedSequence);\n  }\n  public traverseSiGNMove(signMove: SiGNMove): number {\n    return 1;\n  }\n  public traverseCommutator(commutator: Commutator): number {\n    return 2*(this.traverseSequence(commutator.A) + this.traverseSequence(commutator.B));\n  }\n  public traverseConjugate(conjugate: Conjugate): number {\n    return 2*(this.traverseSequence(conjugate.A)) + this.traverseSequence(conjugate.B);\n  }\n  public traversePause(pause: Pause):                      number { return 0; }\n  public traverseNewLine(newLine: NewLine):                number { return 0; }\n  public traverseCommentShort(commentShort: CommentShort): number { return 0; }\n  public traverseCommentLong(commentLong: CommentLong):    number { return 0; }\n}\n\nconst countAnimatedMovesInstance = new CountAnimatedMoves();\nconst countAnimatedMoves = countAnimatedMovesInstance.traverse.bind(countAnimatedMovesInstance);\n\nexport class Cursor<P extends Puzzle> {\n  private moves: Sequence;\n  private durationFn: TraversalUp<Cursor.Duration>;\n\n  private state: State<P>;\n  private moveIdx: number;\n  private moveStartTimestamp: Cursor.Duration;\n  private algTimestamp: Cursor.Duration;\n  constructor(public alg: Sequence, private puzzle: P) {\n    this.setMoves(alg);\n    this.setPositionToStart();\n\n    this.durationFn = new Cursor.AlgDuration(Cursor.DefaultDurationForAmount)\n  }\n\n  private setMoves(alg: Sequence) {\n    var moves = expand(alg);\n    if (moves instanceof Sequence) {\n      this.moves = moves\n    } else {\n      this.moves = new Sequence([moves]);\n    }\n\n    if (this.moves.nestedUnits.length === 0) {\n      throw \"empty alg\"\n    }\n    // TODO: Avoid assuming all base moves are block moves.\n  }\n\n  private algDuration() {\n    // TODO: Cache internally once performance matters.\n    return this.durationFn.traverse(this.moves);\n  }\n\n  private numMoves() {\n    // TODO: Cache internally once performance matters.\n    return countAnimatedMoves(this.moves);\n  }\n\n  setPositionToStart() {\n    this.moveIdx = 0;\n    this.moveStartTimestamp = 0;\n    this.algTimestamp = 0;\n    this.state = this.puzzle.startState();\n  }\n\n  setPositionToEnd() {\n    this.setPositionToStart();\n    this.forward(this.algDuration(), false);\n  }\n\n  startOfAlg(): Cursor.Duration {\n    return 0;\n  }\n  endOfAlg(): Cursor.Duration {\n    return this.algDuration();\n  }\n  private moveDuration(): Cursor.Duration {\n    // TODO: Cache\n    return this.durationFn.traverse(this.moves.nestedUnits[this.moveIdx]);\n  }\n  currentPosition(): Cursor.Position<P> {\n    var pos = <Cursor.Position<P>>{\n      state: this.state,\n      moves: []\n    }\n    var move = this.moves.nestedUnits[this.moveIdx];\n    var moveTS = this.algTimestamp - this.moveStartTimestamp;\n    if (moveTS !== 0) {\n      pos.moves.push({\n        move: move,\n        direction: Cursor.Direction.Forwards,\n        // TODO: Expose a way to traverse `Unit`s directly?\n        fraction: moveTS / this.durationFn.traverse(new Sequence([move]))\n      });\n    }\n    return pos;\n  }\n  currentTimestamp(): Cursor.Duration {\n    return this.algTimestamp;\n  }\n  delta(duration: Cursor.Duration, stopAtMoveBoundary: boolean): boolean {\n    // TODO: Unify forward and backward?\n    if (duration > 0) {\n      return this.forward(duration, stopAtMoveBoundary);\n    } else {\n      return this.backward(-duration, stopAtMoveBoundary);\n    }\n  }\n\n  // TODO: Avoid assuming a single move at a time.\n  forward(duration: Cursor.Duration, stopAtEndOfMove: boolean): /* TODO: Remove this. Represents if move breakpoint was reached. */ boolean {\n    if (duration < 0) {\n      throw \"negative\";\n    }\n    var remainingOffset = (this.algTimestamp - this.moveStartTimestamp) + duration;\n\n    while (this.moveIdx < this.numMoves()) {\n      var move = this.moves.nestedUnits[this.moveIdx];\n      if(!(move instanceof SiGNMove)) {\n        throw \"TODO - only SiGNMove supported\";\n      }\n      var lengthOfMove = this.durationFn.traverse(move);\n      if (remainingOffset < lengthOfMove) {\n        this.algTimestamp = this.moveStartTimestamp + remainingOffset;\n        return false;\n      }\n      this.state = this.puzzle.combine(\n        this.state,\n        this.puzzle.stateFromMove(move)\n      );\n      this.moveIdx += 1;\n      this.moveStartTimestamp += lengthOfMove;\n      this.algTimestamp = this.moveStartTimestamp;\n      remainingOffset -= lengthOfMove;\n      if (stopAtEndOfMove) {\n        return (remainingOffset > 0);\n      }\n    }\n    return true;\n  }\n  backward(duration: Cursor.Duration, stopAtStartOfMove: boolean): /* TODO: Remove this. Represents of move breakpoint was reachec. */ boolean {\n    if (duration < 0) {\n      throw \"negative\";\n    }\n    var remainingOffset = (this.algTimestamp - this.moveStartTimestamp) - duration;\n\n    while (this.moveIdx >= 0) {\n      if (remainingOffset >= 0) {\n        this.algTimestamp = this.moveStartTimestamp + remainingOffset;\n        return false;\n      }\n      if (stopAtStartOfMove || this.moveIdx === 0) {\n        this.algTimestamp = this.moveStartTimestamp;\n        return true; // TODO\n      }\n\n      var prevMove = this.moves.nestedUnits[this.moveIdx - 1];\n      if(!(prevMove instanceof SiGNMove)) {\n        throw \"TODO - only SiGNMove supported\";\n      }\n\n      this.state = this.puzzle.combine(\n        this.state,\n        this.puzzle.invert(this.puzzle.stateFromMove(prevMove))\n      );\n      var lengthOfMove = this.durationFn.traverse(prevMove);\n      this.moveIdx -= 1;\n      this.moveStartTimestamp -= lengthOfMove;\n      this.algTimestamp = this.moveStartTimestamp;\n      remainingOffset += lengthOfMove;\n    }\n    return true;\n  }\n}\n\nexport namespace Cursor {\n  export type Duration = number; // Duration in milliseconds\n  // TODO: Extend `number`, introduce MoveSequenceTimestamp vs. EpochTimestamp,\n  // force Duration to be a difference.\n  export type Timestamp = Duration; // Duration since a particular epoch.\n\n  export type Fraction = number; // Value from 0 to 1.\n\n  export enum Direction {\n    Forwards = 1,\n    Paused = 0,\n    Backwards = -1\n  }\n\n  export interface MoveProgress {\n    move: AlgPart\n    direction: Direction\n    fraction: number\n  }\n\n  export type Position<P extends Puzzle> = {\n    state: State<P>\n    moves: MoveProgress[]\n  }\n\n  export enum BreakpointType {\n    Move,\n    EntireMoveSequence\n  }\n\n  export type DurationForAmount = (amount: number) => Duration;\n\n  export function ConstantDurationForAmount(amount: number): Duration {\n    return 1000;\n  }\n\n  export function DefaultDurationForAmount(amount: number): Duration {\n    switch (Math.abs(amount)) {\n      case 0:\n        return 0;\n      case 1:\n        return 1000;\n      case 2:\n        return 1500;\n      default:\n        return 2000;\n    }\n  }\n\n  export class AlgDuration extends TraversalUp<Duration> {\n    // TODO: Pass durationForAmount as Down type instead?\n    constructor(public durationForAmount = DefaultDurationForAmount) {\n      super()\n    }\n\n    public traverseSequence(sequence: Sequence):             Duration {\n      var total = 0;\n      for (var alg of sequence.nestedUnits) {\n        total += this.traverse(alg)\n      }\n      return total;\n    }\n    public traverseGroup(group: Group):                      Duration { return group.amount * this.traverse(group.nestedSequence); }\n    public traverseSiGNMove(signMove: SiGNMove):             Duration { return this.durationForAmount(signMove.amount); }\n    public traverseCommutator(commutator: Commutator):       Duration { return commutator.amount * 2 * (this.traverse(commutator.A) + this.traverse(commutator.B)); }\n    public traverseConjugate(conjugate: Conjugate):          Duration { return conjugate.amount * (2 * this.traverse(conjugate.A) + this.traverse(conjugate.B)); }\n    public traversePause(pause: Pause):                      Duration { return this.durationForAmount(1); }\n    public traverseNewLine(newLine: NewLine):                Duration { return this.durationForAmount(1); }\n    public traverseCommentShort(commentShort: CommentShort): Duration { return this.durationForAmount(0); }\n    public traverseCommentLong(commentLong: CommentLong):    Duration { return this.durationForAmount(0); }\n  }\n}\n\n// var c = new Cursor(Example.APermCompact);\n// console.log(c.currentPosition());\n// c.forward(4321, false);\n// console.log(c.currentPosition());\n// c.forward(2000, false);\n// console.log(c.currentPosition());\n// c.backward(100, false);\n// console.log(c.currentPosition());\n// c.backward(1800, false);\n// console.log(c.currentPosition());\n// c.forward(605, false);\n// console.log(c.currentPosition());\n// c.forward(10000, true);\n// console.log(c.currentPosition());\n\n\n// abstract class Position<AlgType extends Algorithm> {\n//   Alg: AlgType;\n//   Direction: Timeline.Direction;\n//   TimeToSubAlg: Timeline.Duration;\n//   SubAlg: Algorithm | null;\n// }\n","import {Cursor} from \"./cursor\"\nimport {Puzzle} from \"./puzzle\"\n\n\"use strict\";\n\nexport interface CursorObserver {\n  animCursorChanged: (cursor: Cursor<Puzzle>) => void; // TODO cursor.position?\n}\n\nexport interface DirectionObserver {\n  animDirectionChanged: (direction: Cursor.Direction) => void;\n}\n\nexport interface JumpObserver {\n  // Called when the cursor jumps to a position rather than smoothly animating.\n  // Note: this may be called even if the cursor \"jumps\" to the same position.\n  animCursorJumped: () => void;\n}\n\n// export interface BoundsObserver {\n//   animBoundsChanged: (start: Timeline.Duration, end: Timeline.Duration) => void;\n// }\n\n// TODO: Use generics to unify handling the types of observers.\nexport class Dispatcher implements CursorObserver, DirectionObserver {\n  private cursorObservers: Set<CursorObserver> = new Set<CursorObserver>();\n  private directionObservers: Set<DirectionObserver> = new Set<DirectionObserver>();\n  private jumpObservers: Set<JumpObserver> = new Set<JumpObserver>();\n\n  registerCursorObserver(observer: CursorObserver) {\n    if (this.cursorObservers.has(observer)) {\n      throw \"Duplicate cursor observer added.\";\n    }\n    this.cursorObservers.add(observer);\n  }\n\n  registerDirectionObserver(observer: DirectionObserver) {\n    if (this.directionObservers.has(observer)) {\n      throw \"Duplicate direction observer added.\";\n    }\n    this.directionObservers.add(observer);\n  }\n\n  registerJumpObserver(observer: JumpObserver) {\n    if (this.jumpObservers.has(observer)) {\n      throw \"Duplicate direction observer added.\";\n    }\n    this.jumpObservers.add(observer);\n  }\n\n  animCursorChanged(cursor: Cursor<Puzzle>) {\n    // TODO: guard against nested changes and test.\n    for (var observer of this.cursorObservers) {\n      observer.animCursorChanged(cursor);\n    }\n  }\n\n  animDirectionChanged(direction: Cursor.Direction) {\n    // TODO: guard against nested changes and test.\n    for (var observer of this.directionObservers) {\n      observer.animDirectionChanged(direction);\n    }\n  }\n\n  animCursorJumped() {\n    // TODO: guard against nested changes and test.\n    for (var observer of this.jumpObservers) {\n      observer.animCursorJumped();\n    }\n  }\n}\n\nexport class AnimModel {\n  private lastCursorTime: Cursor.Timestamp = 0;\n  private direction: Cursor.Direction = Cursor.Direction.Paused;\n  private breakpointType: Cursor.BreakpointType = Cursor.BreakpointType.EntireMoveSequence;\n  private scheduler: FrameScheduler;\n  private tempo: number = 1.5; // TODO: Support setting tempo.\n  public dispatcher: Dispatcher = new Dispatcher();\n  // TODO: cache breakpoints instead of re-querying the model constantly.\n  constructor(public cursor: Cursor<Puzzle>) {\n    this.scheduler = new FrameScheduler(this.frame.bind(this));\n  }\n\n  // public getCursor(): Timeline.Duration {\n  //   return this.cursor;\n  // }\n\n  public getBounds(): Cursor.Duration[] {\n    return [\n      this.cursor.startOfAlg(),\n      this.cursor.endOfAlg()\n    ];\n  }\n\n  private timeScaling(): number {\n    return this.direction * this.tempo;\n  }\n\n  // Update the cursor based on the time since lastCursorTime, and reset\n  // lastCursorTime.\n  private updateCursor(timestamp: Cursor.Timestamp) {\n    if (this.direction === Cursor.Direction.Paused) {\n      this.lastCursorTime = timestamp;\n      return;\n    }\n\n    // var previousCursor = this.cursor;\n\n    var elapsed = timestamp - this.lastCursorTime;\n    this.lastCursorTime = timestamp;\n    // Workaround for the first frame: https://twitter.com/lgarron/status/794846097445269504\n    if (elapsed < 0) {\n      elapsed = 0;\n    }\n    var reachedMoveBreakpoint = this.cursor.delta(elapsed * this.timeScaling(), this.breakpointType === Cursor.BreakpointType.Move);\n    if (reachedMoveBreakpoint) {\n        this.setDirection(Cursor.Direction.Paused);\n        this.scheduler.stop();\n    }\n  }\n\n  private setDirection(direction: Cursor.Direction) {\n    // TODO: Handle in frame for debouncing?\n    // (Are there any use cases that need synchoronous observation?)\n    this.direction = direction;\n    this.dispatcher.animDirectionChanged(direction);\n  }\n\n  private frame(timestamp: Cursor.Timestamp) {\n    this.updateCursor(timestamp);\n    this.dispatcher.animCursorChanged(this.cursor);\n  }\n\n  // TODO: Push this into timeline.\n  private setBreakpointType(breakpointType: Cursor.BreakpointType) {\n    this.breakpointType = breakpointType;\n  }\n\n  public isPaused() {\n    return this.direction === Cursor.Direction.Paused;\n  }\n\n  // Animate or pause in the given direction.\n  // Idempotent.\n  private animateDirection(direction: Cursor.Direction): void {\n    if (this.direction === direction) {\n      return;\n    }\n\n    // Update cursor based on previous direction.\n    this.updateCursor(performance.now());\n\n    // Start the new direction.\n    this.setDirection(direction);\n    if (direction === Cursor.Direction.Paused) {\n      this.scheduler.stop();\n    } else {\n      this.scheduler.start();\n    }\n  }\n\n  public skipAndPauseTo(duration: Cursor.Duration): void {\n    this.pause();\n    this.cursor.setPositionToStart();\n    this.cursor.forward(duration, false); // TODO\n    this.scheduler.singleFrame();\n  }\n\n  playForward(): void {\n    this.setBreakpointType(Cursor.BreakpointType.EntireMoveSequence);\n    this.animateDirection(Cursor.Direction.Forwards);\n  }\n\n  // A simple wrapper for animateDirection(Paused).\n  pause(): void {\n    this.animateDirection(Cursor.Direction.Paused);\n  }\n\n  playBackward(): void {\n    this.setBreakpointType(Cursor.BreakpointType.EntireMoveSequence);\n    this.animateDirection(Cursor.Direction.Backwards);\n  }\n\n  skipToStart(): void {\n    this.skipAndPauseTo(this.cursor.startOfAlg());\n    // TODO: Wait for flash to finish before animating?\n    this.dispatcher.animCursorJumped();\n  }\n\n  skipToEnd(): void {\n    this.skipAndPauseTo(this.cursor.endOfAlg());\n    // TODO: Wait for flash to finish before animating?\n    this.dispatcher.animCursorJumped();\n  }\n\n  public isAtEnd() {\n    return this.cursor.currentTimestamp() == this.cursor.endOfAlg();\n  }\n\n  stepForward(): void {\n    this.cursor.forward(0.1, false); // TODO\n    this.setBreakpointType(Cursor.BreakpointType.Move);\n    this.animateDirection(Cursor.Direction.Forwards);\n  }\n\n  stepBackward(): void {\n    this.cursor.backward(0.1, false); // TODO\n    this.setBreakpointType(Cursor.BreakpointType.Move);\n    this.animateDirection(Cursor.Direction.Backwards);\n  }\n\n  togglePausePlayForward(): void {\n    if (this.isPaused()) {\n      this.playForward();\n    } else {\n      this.pause();\n    }\n  }\n}\n\n\nclass FrameScheduler {\n  private animating: boolean = false;\n  constructor(private callback: (timestamp: Cursor.Timestamp) => void) {}\n\n  animFrame(timestamp: Cursor.Timestamp) {\n    this.callback(timestamp);\n    if (this.animating) {\n      // TODO: use same bound frame instead of creating a new binding each frame.\n      requestAnimationFrame(this.animFrame.bind(this));\n    }\n  }\n\n  // Start scheduling frames if not already running.\n  // Idempotent.\n  start(): void {\n    if (!this.animating) {\n      this.animating = true;\n      requestAnimationFrame(this.animFrame.bind(this));\n    }\n  }\n\n  // Stop scheduling frames (if not already stopped).\n  // Idempotent.\n  stop(): void {\n    this.animating = false;\n  }\n\n  singleFrame() {\n    // Instantaneously start and stop, since that schedules a single frame iff\n    // there is not already one scheduled.\n    this.start();\n    this.stop();\n  }\n}\n","import {SiGNMove} from \"alg\"\nimport {Combine, EquivalentStates, Invert, KPuzzle, KPuzzleDefinition, Puzzles, Transformation, stateForSiGNMove} from \"kpuzzle\"\n\nexport type MoveName = string\n\nexport interface MoveProgress {\n  signMove: SiGNMove\n  fraction: number\n}\n\nexport interface State<Puzzle> {\n}\n\nexport abstract class Puzzle {\n  abstract startState(): State<Puzzle>\n  abstract invert(state: State<Puzzle>): State<Puzzle>\n  abstract combine(s1: State<Puzzle>, s2: State<Puzzle>): State<Puzzle>\n  multiply(state: State<Puzzle>, amount: number): State<Puzzle> {\n    if (amount < 0) {\n      return this.invert(this.multiply(state, -amount));\n    }\n\n    var newState = this.startState();\n    for(var i = 0; i < amount; i++) {\n      newState = this.combine(newState, state);\n    }\n    return newState;\n  }\n  abstract stateFromMove(signMove: SiGNMove): State<Puzzle>\n  abstract equivalent(s1: State<Puzzle>, s2: State<Puzzle>): boolean\n}\n\ninterface KSolvePuzzleState extends Transformation, State<KSolvePuzzle> {\n}\n\nexport class KSolvePuzzle extends Puzzle {\n  constructor(private definition: KPuzzleDefinition) {\n    super();\n  }\n\n  static fromID(id: string): KSolvePuzzle {\n    return new KSolvePuzzle(Puzzles[id]);\n  }\n\n  startState(): KSolvePuzzleState {\n    return this.definition.startPieces;\n  }\n  invert(state: KSolvePuzzleState): KSolvePuzzleState {\n    return Invert(this.definition, state);\n  }\n  combine(s1: KSolvePuzzleState, s2: KSolvePuzzleState): KSolvePuzzleState {\n    return Combine(this.definition, s1, s2);\n  }\n  stateFromMove(signMove: SiGNMove): KSolvePuzzleState {\n    return stateForSiGNMove(this.definition, signMove);\n  }\n  equivalent(s1: KSolvePuzzleState, s2: KSolvePuzzleState): boolean {\n    return EquivalentStates(this.definition, s1, s2);\n  }\n}\n\nclass QTMCounterState implements State<QTMCounterPuzzle> {\n  constructor(public value: number) {}\n}\n\nexport class QTMCounterPuzzle extends Puzzle {\n  startState(): QTMCounterState {\n    return new QTMCounterState(0);\n  }\n  invert(state: QTMCounterState): QTMCounterState {\n    return new QTMCounterState(-state.value);\n  }\n  combine(s1: QTMCounterState, s2: QTMCounterState): QTMCounterState {\n    return new QTMCounterState(s1.value + s2.value);\n  }\n  stateFromMove(signMove: SiGNMove): QTMCounterState {\n    return new QTMCounterState(Math.abs(signMove.amount));\n  }\n  equivalent(s1: QTMCounterState, s2: QTMCounterState): boolean {\n    return s1.value === s2.value;\n  }\n}\n","import {Sequence, SiGNMove, algToString} from \"alg\"\nimport {Combine, KPuzzleDefinition, SVG, Transformation, stateForSiGNMove} from \"kpuzzle\"\n\nimport {CursorObserver, DirectionObserver, JumpObserver, AnimModel} from \"./anim\"\nimport {Cursor} from \"./cursor\"\nimport {Puzzle} from \"./puzzle\"\n\ninterface Document {\n    mozCancelFullScreen: () => void;\n    msExitFullscreen: () => void;\n    mozFullScreenElement: HTMLElement;\n    msFullscreenElement: HTMLElement;\n}\n\ninterface Element {\n    mozRequestFullScreen: () => void;\n    msRequestFullscreen: () => void;\n}\n\nnamespace FullscreenAPI {\n  export function element() {\n    return document.fullscreenElement ||\n           document.webkitFullscreenElement ||\n           (document as any).mozFullScreenElement ||\n           (document as any).msFullscreenElement ||\n           document.webkitFullscreenElement;\n  }\n  export function request(element: HTMLElement) {\n    var requestFullscreen = element.requestFullscreen ||\n                            (element as any).mozRequestFullScreen ||\n                            (element as any).msRequestFullscreen ||\n                            (element as any).webkitRequestFullscreen;\n    requestFullscreen.call(element);\n  }\n  export function exit() {\n    var exitFullscreen = document.exitFullscreen ||\n                         (document as any).mozCancelFullScreen ||\n                         (document as any).msExitFullscreen ||\n                         (document as any).webkitExitFullscreen;\n    exitFullscreen.call(document);\n  }\n}\n\nexport abstract class Button {\n  public element: HTMLButtonElement;\n  constructor(title: string, initialClass: string) {\n    this.element = document.createElement(\"button\");\n    this.element.title = title;\n    // TODO: Handle updating image based on anim state.\n    this.element.classList.add(initialClass);\n    this.element.addEventListener(\"click\", this.onpress.bind(this));\n  }\n\n  abstract onpress(): void\n}\n\nexport module Button {\n\n  export class Fullscreen extends Button {\n    constructor(private fullscreenElement: HTMLElement) {\n      super(\"Full Screen\", \"fullscreen\");\n    }\n\n    onpress(): void {\n      if (FullscreenAPI.element() === this.fullscreenElement) {\n        FullscreenAPI.exit();\n      } else {\n        FullscreenAPI.request(this.fullscreenElement);\n      }\n    }\n  }\n\n  export class SkipToStart extends Button {\n    constructor(private anim: AnimModel) {\n      super(\"Skip To Start\", \"skip-to-start\"); }\n    onpress(): void { this.anim.skipToStart(); }\n  }\n  export class SkipToEnd extends Button {\n    constructor(private anim: AnimModel) {\n      super(\"Skip To End\", \"skip-to-end\"); }\n    onpress(): void { this.anim.skipToEnd(); }\n  }\n  export class PlayPause extends Button implements DirectionObserver {\n    constructor(private anim: AnimModel) {\n      super(\"Play\", \"play\");\n      this.anim.dispatcher.registerDirectionObserver(this);\n    }\n    onpress(): void {\n      if (this.anim.isPaused() && this.anim.isAtEnd()) {\n        this.anim.skipToStart();\n      }\n      this.anim.togglePausePlayForward();\n    }\n    animDirectionChanged(direction: Cursor.Direction): void {\n      // TODO: Handle flash of pause button when pressed while the Twisty is already at the end.\n      var newClass = direction === Cursor.Direction.Paused ? \"play\" : \"pause\";\n      this.element.classList.remove(\"play\", \"pause\")\n      this.element.classList.add(newClass);\n\n      this.element.title = direction === Cursor.Direction.Paused ? \"Play\" : \"Pause\";\n    }\n  }\n  export class StepForward extends Button {\n    constructor(private anim: AnimModel) {\n      super(\"Step forward\", \"step-forward\"); }\n    onpress(): void { this.anim.stepForward(); }\n  }\n  export class StepBackward extends Button {\n    constructor(private anim: AnimModel) {\n      super(\"Step backward\", \"step-backward\"); }\n    onpress(): void { this.anim.stepBackward(); }\n  }\n}\n\nexport class ControlBar {\n  public element: HTMLElement;\n  constructor(private anim: AnimModel, private twistyElement: HTMLElement) {\n    this.element = document.createElement(\"twisty-control-bar\");\n\n    this.element.appendChild((new Button.Fullscreen(twistyElement)).element);\n    this.element.appendChild((new Button.SkipToStart(anim)).element);\n    this.element.appendChild((new Button.StepBackward(anim)).element);\n    this.element.appendChild((new Button.PlayPause(anim)).element);\n    this.element.appendChild((new Button.StepForward(anim)).element);\n    this.element.appendChild((new Button.SkipToEnd(anim)).element);\n  }\n}\n\nexport class Scrubber implements CursorObserver {\n  public readonly element: HTMLInputElement;\n  constructor(private anim: AnimModel) {\n    this.element = document.createElement(\"input\");\n    this.element.classList.add(\"scrubber\");\n    this.element.type = \"range\";\n\n    this.element.addEventListener(\"input\", this.oninput.bind(this));\n    var bounds = this.anim.getBounds();\n    this.element.min = String(bounds[0]);\n    this.element.max = String(bounds[1]);\n    this.element.value = String(this.anim.cursor.currentTimestamp());\n    this.anim.dispatcher.registerCursorObserver(this);\n  }\n\n  private updateBackground() {\n    // TODO: Figure out the most efficient way to do this.\n    // TODO: Pad by the thumb radius at each end.\n    var min = parseInt(this.element.min);\n    var max = parseInt(this.element.max);\n    var value = parseInt(this.element.value);\n    var v = (value - min) / max * 100;\n    this.element.style.background = `linear-gradient(to right, \\\n      rgb(204, 24, 30) 0%, \\\n      rgb(204, 24, 30) ${v}%, \\\n      rgba(0, 0, 0, 0.25) ${v}%, \\\n      rgba(0, 0, 0, 0.25) 100%\\\n      )`;\n  }\n\n  private oninput(): void {\n    // TODO: Ideally, we should prevent this from firing back.\n    this.anim.skipAndPauseTo(parseInt(this.element.value));\n    this.updateBackground();\n  }\n\n  animCursorChanged(cursor: Cursor<Puzzle>): void {\n    this.element.value = String(cursor.currentTimestamp());\n    this.updateBackground();\n  }\n\n  animBoundsChanged(): void {\n    // TODO\n    this.updateBackground();\n  }\n}\n\nexport class CursorTextView implements CursorObserver {\n  public readonly element: HTMLElement;\n  constructor(private anim: AnimModel) {\n    this.element = document.createElement(\"cursor-text-view\");\n    this.element.textContent = String(this.anim.cursor.currentTimestamp());\n    this.anim.dispatcher.registerCursorObserver(this);\n  }\n\n  animCursorChanged(cursor: Cursor<Puzzle>) {\n    this.element.textContent = String(Math.floor(cursor.currentTimestamp()));\n  }\n}\n\nexport class CursorTextMoveView implements CursorObserver {\n  public readonly element: HTMLElement;\n  constructor(private anim: AnimModel) {\n    this.element = document.createElement(\"cursor-text-view\");\n    this.anim.dispatcher.registerCursorObserver(this);\n\n    var durFn = new Cursor.AlgDuration(Cursor.DefaultDurationForAmount);\n\n    this.animCursorChanged(anim.cursor);\n  }\n\n  private formatFraction(k: number) {\n    return (String(k) + (Math.floor(k) === k ? \".\" : \"\") + \"000000\").slice(0, 5)\n  }\n\n  animCursorChanged(cursor: Cursor<Puzzle>) {\n    var pos = cursor.currentPosition();\n    var s = \"\" + Math.floor(cursor.currentTimestamp());\n    if (pos.moves.length > 0) {\n      // TODO: cache the name.\n      // TODO: Don't wrap in Sequence if we can add toString() to AlgPart interface?\n      s += \" \" + algToString(new Sequence([pos.moves[0].move])) + \" \" + this.formatFraction(pos.moves[0].fraction);\n    }\n    this.element.textContent = s;\n  }\n}\n\nexport class KSolveView implements CursorObserver, JumpObserver {\n  public readonly element: HTMLElement;\n  private svg: SVG;\n  constructor(private anim: AnimModel, private definition: KPuzzleDefinition) {\n    this.element = document.createElement(\"ksolve-svg-view\");\n    this.anim.dispatcher.registerCursorObserver(this);\n    this.anim.dispatcher.registerJumpObserver(this);\n\n    this.svg = new SVG(definition); // TODO: Dynamic puzzle\n    this.element.appendChild(this.svg.element);\n  }\n\n  animCursorChanged(cursor: Cursor<Puzzle>) {\n    var pos = cursor.currentPosition();\n    if (pos.moves.length > 0) {\n\n      var move = (pos.moves[0].move as SiGNMove);\n\n      var def = this.definition;\n      var partialMove = new SiGNMove(move.outerLayer, move.innerLayer, move.family, move.amount * pos.moves[0].direction)\n      var newState = Combine(\n        def,\n        pos.state as Transformation,\n        stateForSiGNMove(def, partialMove)\n      );\n      this.svg.draw(this.definition, pos.state as Transformation, newState, pos.moves[0].fraction);\n    } else {\n      this.svg.draw(this.definition, pos.state as Transformation);\n    }\n  }\n\n  animCursorJumped() {\n    console.log(\"jumped KSolve\");\n    this.element.classList.add(\"flash\");\n    setTimeout(() => this.element.classList.remove(\"flash\"), 0);\n  }\n}\n\nexport class Player {\n  public element: HTMLElement;\n  constructor(private anim: AnimModel, definition: KPuzzleDefinition) {\n    this.element = document.createElement(\"player\");\n\n    this.element.appendChild((new KSolveView(this.anim, definition)).element);\n    this.element.appendChild((new Scrubber(this.anim)).element);\n    this.element.appendChild((new ControlBar(this.anim, this.element)).element);\n    this.element.appendChild((new CursorTextMoveView(this.anim)).element);\n  }\n}\n","import {Sequence, Example, parse} from \"alg\"\nimport {KPuzzle, KPuzzleDefinition, Puzzles} from \"kpuzzle\"\n\nimport {AnimModel} from \"./anim\"\nimport {Cursor} from \"./cursor\"\nimport {Puzzle, State, KSolvePuzzle} from \"./puzzle\"\nimport {Player} from \"./widget\"\n\n\"use strict\";\n\nclass TwistyParams {\n   alg?: Sequence;\n   puzzle?: KPuzzleDefinition;\n}\n\n// TODO: Turn Twisty into a module and move Twisty.Twisty into Twisty proper.\nexport class Twisty {\n  private alg: Sequence;\n  private anim: AnimModel;\n  private cursor: Cursor<Puzzle>;\n  private puzzleDef: KPuzzleDefinition; // TODO: Replace this with a Puzzle instance.\n  constructor(public element: Element, config: TwistyParams = {}) {\n    this.alg = config.alg || Example.Niklas;\n    this.puzzleDef = config.puzzle || Puzzles[\"333\"];\n    this.cursor = new Cursor(this.alg, new KSolvePuzzle(this.puzzleDef));\n    // this.timeline = new Timeline(Example.HeadlightSwaps);\n    this.anim = new AnimModel(this.cursor);\n\n    this.element.appendChild((new Player(this.anim, this.puzzleDef)).element);\n  }\n}\n\nfunction paramsFromTwistyElem(elem: Element): TwistyParams {\n  var params = new TwistyParams();\n\n  var puzzle = elem.getAttribute(\"puzzle\");\n  if (puzzle) {\n    params.puzzle = Puzzles[puzzle];\n  }\n\n  var algo = elem.getAttribute(\"alg\");\n  if (algo) {\n    params.alg = parse(algo); // TODO: parse\n  }\n\n  return params;\n}\n\n// Initialize a Twisty for the given Element unless the element's\n// `initialization` attribute is set to `custom`.\nfunction autoInitialize(elem: Element) {\n  const ini = elem.getAttribute(\"initialization\");\n  var params = paramsFromTwistyElem(elem);\n  if (ini !== \"custom\") {\n    new Twisty(elem, params);\n  }\n}\n\nfunction autoInitializePage() {\n  const elems = document.querySelectorAll(\"twisty\");\n  console.log(`Found ${elems.length} twisty elem${elems.length === 1 ? \"\" : \"s\"} on page.`)\n\n  for (let i = 0; i < elems.length; i++) {\n    autoInitialize(elems[i]);\n  }\n}\n\nif (typeof window !== \"undefined\") {\n  window.addEventListener(\"load\", autoInitializePage);\n}\n"],"sourceRoot":""}