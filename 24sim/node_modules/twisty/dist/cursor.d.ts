import { AlgPart, SiGNMove, CommentLong, CommentShort, Commutator, Conjugate, Group, NewLine, Pause, Sequence } from "alg";
import { TraversalUp } from "alg";
import { Puzzle, State } from "./puzzle";
export declare class Cursor<P extends Puzzle> {
    alg: Sequence;
    private puzzle;
    private moves;
    private durationFn;
    private state;
    private moveIdx;
    private moveStartTimestamp;
    private algTimestamp;
    constructor(alg: Sequence, puzzle: P);
    private setMoves;
    private algDuration;
    private numMoves;
    setPositionToStart(): void;
    setPositionToEnd(): void;
    startOfAlg(): Cursor.Duration;
    endOfAlg(): Cursor.Duration;
    private moveDuration;
    currentPosition(): Cursor.Position<P>;
    currentTimestamp(): Cursor.Duration;
    delta(duration: Cursor.Duration, stopAtMoveBoundary: boolean): boolean;
    forward(duration: Cursor.Duration, stopAtEndOfMove: boolean): boolean;
    backward(duration: Cursor.Duration, stopAtStartOfMove: boolean): boolean;
}
export declare namespace Cursor {
    type Duration = number;
    type Timestamp = Duration;
    type Fraction = number;
    enum Direction {
        Forwards = 1,
        Paused = 0,
        Backwards = -1
    }
    interface MoveProgress {
        move: AlgPart;
        direction: Direction;
        fraction: number;
    }
    type Position<P extends Puzzle> = {
        state: State<P>;
        moves: MoveProgress[];
    };
    enum BreakpointType {
        Move = 0,
        EntireMoveSequence = 1
    }
    type DurationForAmount = (amount: number) => Duration;
    function ConstantDurationForAmount(amount: number): Duration;
    function DefaultDurationForAmount(amount: number): Duration;
    class AlgDuration extends TraversalUp<Duration> {
        durationForAmount: typeof DefaultDurationForAmount;
        constructor(durationForAmount?: typeof DefaultDurationForAmount);
        traverseSequence(sequence: Sequence): Duration;
        traverseGroup(group: Group): Duration;
        traverseSiGNMove(signMove: SiGNMove): Duration;
        traverseCommutator(commutator: Commutator): Duration;
        traverseConjugate(conjugate: Conjugate): Duration;
        traversePause(pause: Pause): Duration;
        traverseNewLine(newLine: NewLine): Duration;
        traverseCommentShort(commentShort: CommentShort): Duration;
        traverseCommentLong(commentLong: CommentLong): Duration;
    }
}
